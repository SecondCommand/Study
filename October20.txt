
localStorage sessionStorage cookies
This is an extremely broad scope question, and a lot of 
the pros/cons will be contextual to the situation.
In all cases, these storage mechanisms will be specific 
to an individual browser on an individual computer/device. 
Any requirement to store data on an ongoing basis across 
sessions will need to involve your application server side
 - most likely using a database, but possibly XML or a text/CSV file.
localStorage, sessionStorage, and cookies are all client 
storage solutions. Session data is held on the server where
 it remains under your direct control.
localStorage and sessionStorage
localStorage and sessionStorage are relatively new APIs 
(meaning, not all legacy browsers will support them) and 
are near identical (both in APIs and capabilities) with the 
sole exception of persistence. sessionStorage (as the name suggests)
 is only available for the duration of the browser session (and is
  deleted when the tab or window is closed) - it does, however, 
  survive page reloads (source DOM Storage guide - Mozilla Developer Network).

Clearly, if the data you are storing needs to be available on an
 ongoing basis then localStorage is preferable to sessionStorage
  - although you should note both can be cleared by the user so you 
  should not rely on the continuing existence of data in either case.

localStorage and sessionStorage are perfect for persisting non-sensitive
 data needed within client scripts between pages (for example: preferences,
  scores in games). The data stored in localStorage and sessionStorage can 
  easily be read or changed from within the client/browser so should not be
   relied upon for storage of sensitive or security-related data within applications.
Cookies
This is also true for cookies, these can be trivially tampered with by 
\the user, and data can also be read from them in plain text - so if you
 are wanting to store sensitive data then the session is really your only
  option. If you are not using SSL, cookie information can also be intercepted
   in transit, especially on an open wifi.
On the positive side cookies can have a degree of protection applied from 
security risks like Cross-Site Scripting (XSS)/Script injection by setting an
 HTTP only flag which means modern (supporting) browsers will prevent access 
 to the cookies and values from JavaScript (this will also prevent your own, 
 legitimate, JavaScript from accessing them). This is especially important with
  authentication cookies, which are used to store a token containing details of 
  the user who is logged on - if you have a copy of that cookie then for all intents
   and purposes you become that user as far as the web application is concerned, and 
   have the same access to data and functionality the user has.
As cookies are used for authentication purposes and persistence of user data, all 
cookies valid for a page are sent from the browser to the server for every request
 to the same domain - this includes the original page request, any subsequent Ajax
  requests, all images, stylesheets, scripts, and fonts. For this reason, cookies 
  should not be used to store large amounts of information. The browser may also impose
 limits on the size of information that can be stored in cookies. Typically cookies are 
 used to store identifying tokens for authentication, session, and advertising tracking. 
 The tokens are typically not human readable information in and of themselves, but encrypted
  identifiers linked to your application or database.